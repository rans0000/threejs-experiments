{"mappings":"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","sources":["<anon>","src/scripts/basic-scene/basic-rapier3d.ts"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire03bf\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire03bf\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $2LLMu = parcelRequire(\"2LLMu\");\n\nvar $ccy7r = parcelRequire(\"ccy7r\");\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $5Rd1x = parcelRequire(\"5Rd1x\");\nconst $f5fbb86140af9639$var$entities = [];\n// -----------------------------------------------------------\n// -----------------------------------------------------------\n(0, $2LLMu.default).init().then(()=>{\n    // initialize the scene\n    const { world: world, scene: scene, camera: camera, controls: controls, renderer: renderer } = $f5fbb86140af9639$var$init();\n    // setup geometry and colliders\n    $f5fbb86140af9639$var$buildScene($f5fbb86140af9639$var$entities, scene, world);\n    // setup the loop\n    const clock = new $ilwiq.Clock();\n    let delta;\n    function gameLoop() {\n        delta = clock.getDelta();\n        world.timestep = Math.min(delta, 0.1);\n        world.step();\n        for (const entity of $f5fbb86140af9639$var$entities)entity.update();\n        controls.update();\n        renderer.render(scene, camera);\n        window.requestAnimationFrame(gameLoop);\n    }\n    window.requestAnimationFrame(gameLoop);\n});\n// -----------------------------------------------------------\n// -----------------------------------------------------------\nfunction $f5fbb86140af9639$var$init() {\n    // setup the scene\n    const gravity = {\n        x: 0,\n        y: -9.81,\n        z: 0\n    };\n    const world = new (0, $2LLMu.default).World(gravity);\n    // setup threejs\n    const scene = new $ilwiq.Scene();\n    // setup the light\n    const light = new $ilwiq.SpotLight(undefined, Math.PI * 10);\n    light.position.set(2.5, 5, 5);\n    light.angle = Math.PI / 3;\n    light.penumbra = 0.5;\n    light.castShadow = true;\n    light.shadow.blurSamples = 10;\n    light.shadow.radius = 5;\n    scene.add(light);\n    // setup the camera\n    const camera = new $ilwiq.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 100);\n    camera.position.set(0, 2, 5);\n    // setup renderer\n    const renderer = new $ilwiq.WebGLRenderer({\n        antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = $ilwiq.VSMShadowMap;\n    document.body.appendChild(renderer.domElement);\n    window.addEventListener(\"resize\", ()=>{\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n    // setup camera controls\n    const controls = new (0, $5Rd1x.OrbitControls)(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.target.y = 1;\n    return {\n        world: world,\n        scene: scene,\n        renderer: renderer,\n        camera: camera,\n        controls: controls\n    };\n}\n// -----------------------------------------------------------\n// -----------------------------------------------------------\nfunction $f5fbb86140af9639$var$buildScene(entities, scene, world) {\n    // setup the cube\n    const cubeMesh = new $ilwiq.Mesh(new $ilwiq.BoxGeometry(1, 1, 1), new $ilwiq.MeshNormalMaterial());\n    cubeMesh.castShadow = true;\n    const cubeBody = world.createRigidBody((0, $2LLMu.default).RigidBodyDesc.dynamic().setTranslation(0, 5, 0).setCanSleep(false));\n    const cubeShape = (0, $2LLMu.default).ColliderDesc.cuboid(0.5, 0.5, 0.5).setMass(1).setRestitution(0.2);\n    world.createCollider(cubeShape, cubeBody);\n    const cube = new (0, $ccy7r.RenderableEntity)(scene, world, cubeMesh, \"cube\", cubeBody);\n    cube.addToScene();\n    entities.push(cube);\n    // setup the floor\n    const floorMesh = new $ilwiq.Mesh(new $ilwiq.BoxGeometry(100, 1, 100), new $ilwiq.MeshPhongMaterial());\n    floorMesh.receiveShadow = true;\n    floorMesh.position.y = -1;\n    const floorBody = world.createRigidBody((0, $2LLMu.default).RigidBodyDesc.fixed().setTranslation(0, -1, 0));\n    const floorShape = (0, $2LLMu.default).ColliderDesc.cuboid(50, 0.5, 50);\n    world.createCollider(floorShape, floorBody);\n    const floor = new (0, $ccy7r.RenderableEntity)(scene, world, floorMesh, \"floor\", floorBody);\n    floor.addToScene();\n    entities.push(floor);\n}\n\n\n//# sourceMappingURL=basic-rapier3d.4804a20b.js.map\n","import RAPIER from '@dimforge/rapier3d-compat';\r\nimport { Entity, RenderableEntity } from 'src/libs/entity';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nconst entities: Entity[] = [];\r\n\r\n// -----------------------------------------------------------\r\n// -----------------------------------------------------------\r\n\r\nRAPIER.init().then(() => {\r\n    // initialize the scene\r\n    const { world, scene, camera, controls, renderer } = init();\r\n\r\n    // setup geometry and colliders\r\n    buildScene(entities, scene, world);\r\n\r\n    // setup the loop\r\n    const clock = new THREE.Clock();\r\n    let delta;\r\n\r\n    function gameLoop() {\r\n        delta = clock.getDelta();\r\n        world.timestep = Math.min(delta, 0.1);\r\n        world.step();\r\n\r\n        for (const entity of entities) {\r\n            entity.update();\r\n        }\r\n\r\n        controls.update();\r\n        renderer.render(scene, camera);\r\n        window.requestAnimationFrame(gameLoop);\r\n    }\r\n\r\n    window.requestAnimationFrame(gameLoop);\r\n});\r\n\r\n// -----------------------------------------------------------\r\n// -----------------------------------------------------------\r\nfunction init() {\r\n    // setup the scene\r\n    const gravity = { x: 0, y: -9.81, z: 0 };\r\n    const world = new RAPIER.World(gravity);\r\n\r\n    // setup threejs\r\n    const scene = new THREE.Scene();\r\n\r\n    // setup the light\r\n    const light = new THREE.SpotLight(undefined, Math.PI * 10);\r\n    light.position.set(2.5, 5, 5);\r\n    light.angle = Math.PI / 3;\r\n    light.penumbra = 0.5;\r\n    light.castShadow = true;\r\n    light.shadow.blurSamples = 10;\r\n    light.shadow.radius = 5;\r\n    scene.add(light);\r\n\r\n    // setup the camera\r\n    const camera = new THREE.PerspectiveCamera(\r\n        50,\r\n        window.innerWidth / window.innerHeight,\r\n        0.1,\r\n        100\r\n    );\r\n    camera.position.set(0, 2, 5);\r\n\r\n    // setup renderer\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.VSMShadowMap;\r\n    document.body.appendChild(renderer.domElement);\r\n\r\n    window.addEventListener('resize', () => {\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n    });\r\n\r\n    // setup camera controls\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n    controls.target.y = 1;\r\n\r\n    return {\r\n        world,\r\n        scene,\r\n        renderer,\r\n        camera,\r\n        controls\r\n    };\r\n}\r\n\r\n// -----------------------------------------------------------\r\n// -----------------------------------------------------------\r\n\r\nfunction buildScene(entities: Entity[], scene: THREE.Scene, world: RAPIER.World) {\r\n    // setup the cube\r\n    const cubeMesh = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), new THREE.MeshNormalMaterial());\r\n    cubeMesh.castShadow = true;\r\n    const cubeBody = world.createRigidBody(\r\n        RAPIER.RigidBodyDesc.dynamic().setTranslation(0, 5, 0).setCanSleep(false)\r\n    );\r\n    const cubeShape = RAPIER.ColliderDesc.cuboid(0.5, 0.5, 0.5).setMass(1).setRestitution(0.2);\r\n    world.createCollider(cubeShape, cubeBody);\r\n    const cube = new RenderableEntity(scene, world, cubeMesh, 'cube', cubeBody);\r\n    cube.addToScene();\r\n    entities.push(cube);\r\n\r\n    // setup the floor\r\n    const floorMesh = new THREE.Mesh(\r\n        new THREE.BoxGeometry(100, 1, 100),\r\n        new THREE.MeshPhongMaterial()\r\n    );\r\n    floorMesh.receiveShadow = true;\r\n    floorMesh.position.y = -1;\r\n    const floorBody = world.createRigidBody(RAPIER.RigidBodyDesc.fixed().setTranslation(0, -1, 0));\r\n    const floorShape = RAPIER.ColliderDesc.cuboid(50, 0.5, 50);\r\n    world.createCollider(floorShape, floorBody);\r\n    const floor = new RenderableEntity(scene, world, floorMesh, 'floor', floorBody);\r\n    floor.addToScene();\r\n    entities.push(floor);\r\n}\r\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$2LLMu","$ccy7r","$ilwiq","$5Rd1x","$f5fbb86140af9639$var$entities","default","then","delta","world","scene","camera","controls","renderer","$f5fbb86140af9639$var$init","World","x","y","z","Scene","light","SpotLight","undefined","Math","PI","position","set","angle","penumbra","castShadow","shadow","blurSamples","radius","add","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","antialias","setSize","shadowMap","enabled","type","VSMShadowMap","document","body","appendChild","domElement","addEventListener","aspect","updateProjectionMatrix","OrbitControls","enableDamping","target","$f5fbb86140af9639$var$buildScene","entities","cubeMesh","Mesh","BoxGeometry","MeshNormalMaterial","cubeBody","createRigidBody","RigidBodyDesc","dynamic","setTranslation","setCanSleep","cubeShape","ColliderDesc","cuboid","setMass","setRestitution","createCollider","cube","RenderableEntity","addToScene","push","floorMesh","MeshPhongMaterial","receiveShadow","floorBody","fixed","floorShape","floor","clock","Clock","requestAnimationFrame","gameLoop","entity","getDelta","timestep","min","step","update","render"],"version":3,"file":"basic-rapier3d.4804a20b.js.map"}