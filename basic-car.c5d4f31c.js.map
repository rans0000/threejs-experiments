{"mappings":"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","sources":["<anon>","src/scripts/car/basic-car.ts","src/libs/car.ts","src/utils/utils.ts"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire03bf\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire03bf\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $2LLMu = parcelRequire(\"2LLMu\");\n\nvar $2LLMu = parcelRequire(\"2LLMu\");\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $ccy7r = parcelRequire(\"ccy7r\");\nclass $813f28caab944845$var$Car extends (0, $ccy7r.Entity) {\n    constructor(scene, world){\n        super(scene, \"car\");\n        this.world = world;\n        const { geometry: geometry, rigidbody: rigidbody } = this.createCar(world);\n        this.geometry = geometry;\n        this.rigidBody = rigidbody;\n    }\n    createCar(world) {\n        // setup the cube\n        const geometry = new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(1, 1, 1), new (0, $ilwiq.MeshNormalMaterial)());\n        geometry.castShadow = true;\n        const rigidbody = world.createRigidBody((0, $2LLMu.RigidBodyDesc).dynamic().setTranslation(0, 0.5, 0).setCanSleep(false));\n        const cubeShape = (0, $2LLMu.ColliderDesc).cuboid(0.5, 0.5, 0.5).setMass(1).setRestitution(0.2);\n        world.createCollider(cubeShape, rigidbody);\n        return {\n            geometry: geometry,\n            rigidbody: rigidbody\n        };\n    }\n    update() {\n        let temp = this.rigidBody.translation();\n        this.geometry.position.set(temp.x, temp.y, temp.z);\n        temp = this.rigidBody.rotation();\n        this.geometry.quaternion.copy(new (0, $ilwiq.Quaternion)(temp.x, temp.y, temp.z));\n        return this;\n    }\n}\nvar $813f28caab944845$export$2e2bcd8739ae039 = $813f28caab944845$var$Car;\n\n\n\nvar $ccy7r = parcelRequire(\"ccy7r\");\n\nvar $2LLMu = parcelRequire(\"2LLMu\");\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $5Rd1x = parcelRequire(\"5Rd1x\");\nfunction $28770b279d7ab5b1$var$createBitmask(indices) {\n    let bitmask = 0;\n    for (let index of indices)bitmask |= 1 << index;\n    return bitmask.toString(2).padStart(16, \"0\");\n}\nfunction $28770b279d7ab5b1$export$dbb3ec8b41095255(members, filters) {\n    const memberId = $28770b279d7ab5b1$var$createBitmask(members);\n    const filterId = $28770b279d7ab5b1$var$createBitmask(filters);\n    return parseInt(memberId + filterId, 2);\n}\nfunction $28770b279d7ab5b1$export$e51e8dbf1014af95() {\n    // setup the scene\n    const gravity = {\n        x: 0,\n        y: -9.81,\n        z: 0\n    };\n    const world = new (0, $2LLMu.World)(gravity);\n    // setup threejs\n    const scene = new (0, $ilwiq.Scene)();\n    // setup the light\n    const light = new (0, $ilwiq.SpotLight)(undefined, Math.PI * 10);\n    light.position.set(2.5, 5, 5);\n    light.angle = Math.PI / 3;\n    light.penumbra = 0.5;\n    light.castShadow = true;\n    light.shadow.blurSamples = 10;\n    light.shadow.radius = 5;\n    scene.add(light);\n    // setup the camera\n    const camera = new (0, $ilwiq.PerspectiveCamera)(50, window.innerWidth / window.innerHeight, 0.1, 100);\n    camera.position.set(0, 2, 5);\n    // setup renderer\n    const renderer = new (0, $ilwiq.WebGLRenderer)({\n        antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = (0, $ilwiq.VSMShadowMap);\n    document.body.appendChild(renderer.domElement);\n    window.addEventListener(\"resize\", ()=>{\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n    // setup camera controls\n    const controls = new (0, $5Rd1x.OrbitControls)(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.target.y = 1;\n    return {\n        world: world,\n        scene: scene,\n        renderer: renderer,\n        camera: camera,\n        controls: controls\n    };\n}\n\n\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\nconst $e1dd6d97eb52a9e6$var$entities = [];\n// -----------------------------------------------------------\n// -----------------------------------------------------------\n(0, $2LLMu.init)().then(()=>{\n    // initialize the scene\n    const { world: world, scene: scene, camera: camera, controls: controls, renderer: renderer } = (0, $28770b279d7ab5b1$export$e51e8dbf1014af95)();\n    // setup geometry and colliders\n    $e1dd6d97eb52a9e6$var$buildScene($e1dd6d97eb52a9e6$var$entities, scene, world);\n    // setup the loop\n    const clock = new (0, $ilwiq.Clock)();\n    let delta;\n    function gameLoop() {\n        delta = clock.getDelta();\n        world.timestep = Math.min(delta, 0.1);\n        world.step();\n        for (const entity of $e1dd6d97eb52a9e6$var$entities)entity.update();\n        controls.update();\n        renderer.render(scene, camera);\n        window.requestAnimationFrame(gameLoop);\n    }\n    window.requestAnimationFrame(gameLoop);\n});\n// -----------------------------------------------------------\n// -----------------------------------------------------------\nfunction $e1dd6d97eb52a9e6$var$buildScene(entities, scene, world) {\n    // setup the floor\n    const floorMesh = new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(100, 1, 100), new (0, $ilwiq.MeshPhongMaterial)());\n    floorMesh.receiveShadow = true;\n    floorMesh.position.y = -1;\n    const floorBody = world.createRigidBody((0, $2LLMu.RigidBodyDesc).fixed().setTranslation(0, -1, 0));\n    const floorShape = (0, $2LLMu.ColliderDesc).cuboid(50, 0.5, 50);\n    world.createCollider(floorShape, floorBody);\n    const floor = new (0, $ccy7r.RenderableEntity)(scene, world, floorMesh, \"floor\", floorBody);\n    floor.addToScene();\n    entities.push(floor);\n    const car = new (0, $813f28caab944845$export$2e2bcd8739ae039)(scene, world);\n    car.addToScene();\n    entities.push(car);\n} // -----------------------------------------------------------\n // -----------------------------------------------------------\n\n\n//# sourceMappingURL=basic-car.c5d4f31c.js.map\n","import { ColliderDesc, init, RigidBodyDesc, World } from '@dimforge/rapier3d-compat';\r\nimport Car from 'src/libs/car';\r\nimport { Entity, RenderableEntity } from 'src/libs/entity';\r\nimport { initBasicScene } from 'src/utils/utils';\r\nimport { BoxGeometry, Clock, Mesh, MeshPhongMaterial } from 'three';\r\n\r\nconst entities: Entity[] = [];\r\n\r\n// -----------------------------------------------------------\r\n// -----------------------------------------------------------\r\n\r\ninit().then(() => {\r\n    // initialize the scene\r\n    const { world, scene, camera, controls, renderer } = initBasicScene();\r\n\r\n    // setup geometry and colliders\r\n    buildScene(entities, scene, world);\r\n\r\n    // setup the loop\r\n    const clock = new Clock();\r\n    let delta;\r\n\r\n    function gameLoop() {\r\n        delta = clock.getDelta();\r\n        world.timestep = Math.min(delta, 0.1);\r\n        world.step();\r\n\r\n        for (const entity of entities) {\r\n            entity.update();\r\n        }\r\n\r\n        controls.update();\r\n        renderer.render(scene, camera);\r\n        window.requestAnimationFrame(gameLoop);\r\n    }\r\n\r\n    window.requestAnimationFrame(gameLoop);\r\n});\r\n\r\n// -----------------------------------------------------------\r\n// -----------------------------------------------------------\r\n\r\nfunction buildScene(entities: Entity[], scene: THREE.Scene, world: World) {\r\n    // setup the floor\r\n    const floorMesh = new Mesh(new BoxGeometry(100, 1, 100), new MeshPhongMaterial());\r\n    floorMesh.receiveShadow = true;\r\n    floorMesh.position.y = -1;\r\n    const floorBody = world.createRigidBody(RigidBodyDesc.fixed().setTranslation(0, -1, 0));\r\n    const floorShape = ColliderDesc.cuboid(50, 0.5, 50);\r\n    world.createCollider(floorShape, floorBody);\r\n    const floor = new RenderableEntity(scene, world, floorMesh, 'floor', floorBody);\r\n    floor.addToScene();\r\n    entities.push(floor);\r\n\r\n    const car = new Car(scene, world);\r\n    car.addToScene();\r\n    entities.push(car);\r\n}\r\n\r\n// -----------------------------------------------------------\r\n// -----------------------------------------------------------\r\n","import { ColliderDesc, RigidBody, RigidBodyDesc, World } from '@dimforge/rapier3d-compat';\r\nimport { BoxGeometry, Mesh, MeshNormalMaterial, Quaternion, Scene } from 'three';\r\nimport { Entity } from './entity';\r\n\r\nclass Car extends Entity {\r\n    world: World;\r\n    rigidBody: RigidBody;\r\n\r\n    constructor(scene: Scene, world: World) {\r\n        super(scene, 'car');\r\n        this.world = world;\r\n        const { geometry, rigidbody } = this.createCar(world);\r\n        this.geometry = geometry;\r\n        this.rigidBody = rigidbody;\r\n    }\r\n\r\n    createCar(world: World) {\r\n        // setup the cube\r\n        const geometry = new Mesh(new BoxGeometry(1, 1, 1), new MeshNormalMaterial());\r\n        geometry.castShadow = true;\r\n        const rigidbody = world.createRigidBody(\r\n            RigidBodyDesc.dynamic().setTranslation(0, 0.5, 0).setCanSleep(false)\r\n        );\r\n        const cubeShape = ColliderDesc.cuboid(0.5, 0.5, 0.5).setMass(1).setRestitution(0.2);\r\n        world.createCollider(cubeShape, rigidbody);\r\n\r\n        return {\r\n            geometry,\r\n            rigidbody\r\n        };\r\n    }\r\n\r\n    update(): this {\r\n        let temp = this.rigidBody.translation();\r\n        this.geometry.position.set(temp.x, temp.y, temp.z);\r\n        temp = this.rigidBody.rotation();\r\n        this.geometry.quaternion.copy(new Quaternion(temp.x, temp.y, temp.z));\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default Car;\r\n","import { World } from '@dimforge/rapier3d-compat';\r\nimport { PerspectiveCamera, Scene, SpotLight, VSMShadowMap, WebGLRenderer } from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nfunction createBitmask(indices: number[]): string {\r\n    let bitmask = 0;\r\n    for (let index of indices) {\r\n        bitmask |= 1 << index;\r\n    }\r\n    return bitmask.toString(2).padStart(16, '0');\r\n}\r\nexport function generateCollisionId(members: number[], filters: number[]): number {\r\n    const memberId = createBitmask(members);\r\n    const filterId = createBitmask(filters);\r\n    return parseInt(memberId + filterId, 2);\r\n}\r\n\r\nexport function initBasicScene() {\r\n    // setup the scene\r\n    const gravity = { x: 0, y: -9.81, z: 0 };\r\n    const world = new World(gravity);\r\n\r\n    // setup threejs\r\n    const scene = new Scene();\r\n\r\n    // setup the light\r\n    const light = new SpotLight(undefined, Math.PI * 10);\r\n    light.position.set(2.5, 5, 5);\r\n    light.angle = Math.PI / 3;\r\n    light.penumbra = 0.5;\r\n    light.castShadow = true;\r\n    light.shadow.blurSamples = 10;\r\n    light.shadow.radius = 5;\r\n    scene.add(light);\r\n\r\n    // setup the camera\r\n    const camera = new PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 100);\r\n    camera.position.set(0, 2, 5);\r\n\r\n    // setup renderer\r\n    const renderer = new WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = VSMShadowMap;\r\n    document.body.appendChild(renderer.domElement);\r\n\r\n    window.addEventListener('resize', () => {\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n    });\r\n\r\n    // setup camera controls\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n    controls.target.y = 1;\r\n\r\n    return {\r\n        world,\r\n        scene,\r\n        renderer,\r\n        camera,\r\n        controls\r\n    };\r\n}\r\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$2LLMu","$ilwiq","$ccy7r","$813f28caab944845$var$Car","Entity","constructor","scene","world","geometry","rigidbody","createCar","rigidBody","Mesh","BoxGeometry","MeshNormalMaterial","castShadow","createRigidBody","RigidBodyDesc","dynamic","setTranslation","setCanSleep","cubeShape","ColliderDesc","cuboid","setMass","setRestitution","createCollider","update","temp","translation","position","set","x","y","z","rotation","quaternion","copy","Quaternion","$5Rd1x","$e1dd6d97eb52a9e6$var$entities","then","delta","camera","controls","renderer","World","Scene","light","SpotLight","undefined","Math","PI","angle","penumbra","shadow","blurSamples","radius","add","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","antialias","setSize","shadowMap","enabled","type","VSMShadowMap","document","body","appendChild","domElement","addEventListener","aspect","updateProjectionMatrix","OrbitControls","enableDamping","target","$e1dd6d97eb52a9e6$var$buildScene","entities","floorMesh","MeshPhongMaterial","receiveShadow","floorBody","fixed","floorShape","floor","RenderableEntity","addToScene","push","car","clock","Clock","requestAnimationFrame","gameLoop","entity","getDelta","timestep","min","step","render"],"version":3,"file":"basic-car.c5d4f31c.js.map"}