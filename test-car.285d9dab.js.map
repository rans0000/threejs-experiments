{"mappings":"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","sources":["<anon>","node_modules/three/examples/jsm/libs/stats.module.js","src/scripts/car/test-car.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire03bf\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire03bf\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"7MGRS\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $5aae44c9b1864d53$export$2e2bcd8739ae039);\nvar $5aae44c9b1864d53$var$Stats = function() {\n    var mode = 0;\n    var container = document.createElement(\"div\");\n    container.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n    container.addEventListener(\"click\", function(event) {\n        event.preventDefault();\n        showPanel(++mode % container.children.length);\n    }, false);\n    //\n    function addPanel(panel) {\n        container.appendChild(panel.dom);\n        return panel;\n    }\n    function showPanel(id) {\n        for(var i = 0; i < container.children.length; i++)container.children[i].style.display = i === id ? \"block\" : \"none\";\n        mode = id;\n    }\n    //\n    var beginTime = (performance || Date).now(), prevTime = beginTime, frames = 0;\n    var fpsPanel = addPanel(new $5aae44c9b1864d53$var$Stats.Panel(\"FPS\", \"#0ff\", \"#002\"));\n    var msPanel = addPanel(new $5aae44c9b1864d53$var$Stats.Panel(\"MS\", \"#0f0\", \"#020\"));\n    if (self.performance && self.performance.memory) var memPanel = addPanel(new $5aae44c9b1864d53$var$Stats.Panel(\"MB\", \"#f08\", \"#201\"));\n    showPanel(0);\n    return {\n        REVISION: 16,\n        dom: container,\n        addPanel: addPanel,\n        showPanel: showPanel,\n        begin: function() {\n            beginTime = (performance || Date).now();\n        },\n        end: function() {\n            frames++;\n            var time = (performance || Date).now();\n            msPanel.update(time - beginTime, 200);\n            if (time >= prevTime + 1000) {\n                fpsPanel.update(frames * 1000 / (time - prevTime), 100);\n                prevTime = time;\n                frames = 0;\n                if (memPanel) {\n                    var memory = performance.memory;\n                    memPanel.update(memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576);\n                }\n            }\n            return time;\n        },\n        update: function() {\n            beginTime = this.end();\n        },\n        // Backwards Compatibility\n        domElement: container,\n        setMode: showPanel\n    };\n};\n$5aae44c9b1864d53$var$Stats.Panel = function(name, fg, bg) {\n    var min = Infinity, max = 0, round = Math.round;\n    var PR = round(window.devicePixelRatio || 1);\n    var WIDTH = 80 * PR, HEIGHT = 48 * PR, TEXT_X = 3 * PR, TEXT_Y = 2 * PR, GRAPH_X = 3 * PR, GRAPH_Y = 15 * PR, GRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = WIDTH;\n    canvas.height = HEIGHT;\n    canvas.style.cssText = \"width:80px;height:48px\";\n    var context = canvas.getContext(\"2d\");\n    context.font = \"bold \" + 9 * PR + \"px Helvetica,Arial,sans-serif\";\n    context.textBaseline = \"top\";\n    context.fillStyle = bg;\n    context.fillRect(0, 0, WIDTH, HEIGHT);\n    context.fillStyle = fg;\n    context.fillText(name, TEXT_X, TEXT_Y);\n    context.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);\n    context.fillStyle = bg;\n    context.globalAlpha = 0.9;\n    context.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);\n    return {\n        dom: canvas,\n        update: function(value, maxValue) {\n            min = Math.min(min, value);\n            max = Math.max(max, value);\n            context.fillStyle = bg;\n            context.globalAlpha = 1;\n            context.fillRect(0, 0, WIDTH, GRAPH_Y);\n            context.fillStyle = fg;\n            context.fillText(round(value) + \" \" + name + \" (\" + round(min) + \"-\" + round(max) + \")\", TEXT_X, TEXT_Y);\n            context.drawImage(canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT);\n            context.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT);\n            context.fillStyle = bg;\n            context.globalAlpha = 0.9;\n            context.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round((1 - value / maxValue) * GRAPH_HEIGHT));\n        }\n    };\n};\nvar $5aae44c9b1864d53$export$2e2bcd8739ae039 = $5aae44c9b1864d53$var$Stats;\n\n});\n\n\nvar $2LLMu = parcelRequire(\"2LLMu\");\n\nvar $ccy7r = parcelRequire(\"ccy7r\");\n\nvar $e7TkJ = parcelRequire(\"e7TkJ\");\n\nvar $fK5g3 = parcelRequire(\"fK5g3\");\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $5Rd1x = parcelRequire(\"5Rd1x\");\n\nvar $jiuw3 = parcelRequire(\"jiuw3\");\nconst $eeb00b4f2e28b67e$var$entities = [];\nlet $eeb00b4f2e28b67e$var$options = {\n    showAxis: true\n};\nconst $eeb00b4f2e28b67e$var$config = {\n    camera: \"pointerLock\",\n    cameraPos: [\n        0,\n        1,\n        4\n    ],\n    fov: 75,\n    lightType: \"directional\"\n};\nconst $eeb00b4f2e28b67e$var$collisionGroups = {\n    floorCID: 0,\n    carChasisCID: 1,\n    wheelCID: 2,\n    axelCID: 3\n};\nconst $eeb00b4f2e28b67e$var$keyMap = {};\n// -----------------------------------------------------------\n// -----------------------------------------------------------\n(0, $2LLMu.init)().then(async ()=>{\n    // initialize the scene\n    const { world: world, scene: scene, camera: camera, controls: controls, renderer: renderer, pivot: pivot, stats: stats } = (0, $fK5g3.initBasicScene)($eeb00b4f2e28b67e$var$keyMap, $eeb00b4f2e28b67e$var$config);\n    // setup geometry and colliders\n    await $eeb00b4f2e28b67e$var$buildScene($eeb00b4f2e28b67e$var$entities, scene, world, pivot);\n    // setup helpers\n    const rapierDebugRenderer = new (0, $e7TkJ.default)(scene, world);\n    const axisHelper = new (0, $ilwiq.AxesHelper)(3);\n    $eeb00b4f2e28b67e$var$options.showAxis && scene.add(axisHelper);\n    // setup the loop\n    const clock = new (0, $ilwiq.Clock)();\n    let delta;\n    // setup the controls\n    const gui = new (0, $jiuw3.GUI)();\n    gui.add(rapierDebugRenderer, \"enabled\").name(\"Rapier Degug Renderer\");\n    gui.add($eeb00b4f2e28b67e$var$options, \"showAxis\").name(\"Show Axis\").onChange((status)=>{\n        status ? scene.add(axisHelper) : scene.remove(axisHelper);\n    });\n    function gameLoop() {\n        delta = clock.getDelta();\n        world.timestep = Math.min(delta, 0.1);\n        world.step();\n        for (const entity of $eeb00b4f2e28b67e$var$entities)entity.update(world.timestep);\n        controls instanceof (0, $5Rd1x.OrbitControls) && controls.update();\n        rapierDebugRenderer.update();\n        renderer.render(scene, camera);\n        stats.update();\n        window.requestAnimationFrame(gameLoop);\n    }\n    window.requestAnimationFrame(gameLoop);\n});\n// -----------------------------------------------------------\n// -----------------------------------------------------------\nasync function $eeb00b4f2e28b67e$var$buildScene(entities, scene, world, pivot) {\n    // setup the floor\n    const floorMesh = new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(100, 1, 100), new (0, $ilwiq.MeshPhongMaterial)());\n    floorMesh.receiveShadow = true;\n    floorMesh.position.y = -1;\n    const floorBody = world.createRigidBody((0, $2LLMu.RigidBodyDesc).fixed().setTranslation(0, -1, 0));\n    const floorShape = (0, $2LLMu.ColliderDesc).cuboid(50, 0.5, 50);\n    world.createCollider(floorShape, floorBody);\n    const floor = new (0, $ccy7r.RenderableEntity)(scene, world, floorMesh, \"floor\", floorBody);\n    floor.addToScene();\n    entities.push(floor);\n    const car = new $eeb00b4f2e28b67e$var$TempCar(scene, world);\n    // (0.9, 0.6, 2)\n    await car.init([\n        0,\n        1,\n        0\n    ], new (0, $ilwiq.Vector3)(0.5, -0.5, 1.5), new (0, $ilwiq.Vector3)(0, 0, 0));\n    entities.push(car);\n}\n// -----------------------------------------------------------\n// -----------------------------------------------------------\nclass $eeb00b4f2e28b67e$var$TempCar extends (0, $ccy7r.Entity) {\n    constructor(scene, world){\n        super(scene, \"tempCar\");\n        this.world = world;\n    }\n    async init(position, frontOffset, backOffset) {\n        const chasisId = (0, $fK5g3.generateCollisionId)([\n            $eeb00b4f2e28b67e$var$collisionGroups.carChasisCID\n        ], [\n            $eeb00b4f2e28b67e$var$collisionGroups.floorCID\n        ]);\n        const wheelId = (0, $fK5g3.generateCollisionId)([\n            $eeb00b4f2e28b67e$var$collisionGroups.wheelCID\n        ], [\n            $eeb00b4f2e28b67e$var$collisionGroups.floorCID\n        ]);\n        const chasisMass = 1500;\n        const wheelMass = 7;\n        const chasisFriction = 0.6;\n        const wheelFriction = 0.6;\n        // setup chasis\n        const chasisBodyDesc = new (0, $2LLMu.RigidBodyDesc)((0, $2LLMu.RigidBodyType).Dynamic).setTranslation(...position).setCanSleep(true);\n        const chasisBody = this.world.createRigidBody(chasisBodyDesc);\n        const chasisShape = (0, $2LLMu.ColliderDesc).cuboid(0.9, 0.6, 2).setTranslation(0, 0, 0).setMass(chasisMass).setRestitution(0.1).setFriction(chasisFriction).setCollisionGroups(chasisId);\n        this.world.createCollider(chasisShape, chasisBody);\n        // -----------------------------------------------------------------\n        // -----------------------------------------------------------------\n        // setup FR wheel\n        const wheelFRBodyDesc = new (0, $2LLMu.RigidBodyDesc)((0, $2LLMu.RigidBodyType).Dynamic).setCanSleep(true);\n        const wheelFRBody = this.world.createRigidBody(wheelFRBodyDesc);\n        const wheelFRShape = (0, $2LLMu.ColliderDesc).cylinder(0.2, 0.3).setTranslation(0, 0, 0).setRotation(new (0, $ilwiq.Quaternion)().setFromAxisAngle(new (0, $ilwiq.Vector3)(0, 0, 1), Math.PI / 2)).setMass(wheelMass).setFriction(wheelFriction).setRestitution(0.1).setCollisionGroups(wheelId);\n        this.world.createCollider(wheelFRShape, wheelFRBody);\n        const wheelFRMotor = this.world.createImpulseJoint((0, $2LLMu.JointData).revolute(new (0, $ilwiq.Vector3)(-frontOffset.x, frontOffset.y, frontOffset.z), new (0, $ilwiq.Vector3)(0, 0, 0), new (0, $ilwiq.Vector3)(-1, 0, 0)), chasisBody, wheelFRBody, true);\n        // setup FL wheel\n        const wheelFLBodyDesc = new (0, $2LLMu.RigidBodyDesc)((0, $2LLMu.RigidBodyType).Dynamic).setCanSleep(true);\n        const wheelFLBody = this.world.createRigidBody(wheelFLBodyDesc);\n        const wheelFLShape = (0, $2LLMu.ColliderDesc).cylinder(0.2, 0.3).setTranslation(0, 0, 0).setRotation(new (0, $ilwiq.Quaternion)().setFromAxisAngle(new (0, $ilwiq.Vector3)(0, 0, 1), Math.PI / 2)).setMass(wheelMass).setFriction(wheelFriction).setRestitution(0.1).setCollisionGroups(wheelId);\n        this.world.createCollider(wheelFLShape, wheelFLBody);\n        const wheelFLMotor = this.world.createImpulseJoint((0, $2LLMu.JointData).revolute(new (0, $ilwiq.Vector3)(frontOffset.x, frontOffset.y, frontOffset.z), new (0, $ilwiq.Vector3)(0, 0, 0), new (0, $ilwiq.Vector3)(-1, 0, 0)), chasisBody, wheelFLBody, true);\n        // setup BR wheel\n        const wheelBRBodyDesc = new (0, $2LLMu.RigidBodyDesc)((0, $2LLMu.RigidBodyType).Dynamic).setCanSleep(true);\n        const wheelBRBody = this.world.createRigidBody(wheelBRBodyDesc);\n        const wheelBRShape = (0, $2LLMu.ColliderDesc).cylinder(0.2, 0.3).setTranslation(0, 0, 0).setFriction(wheelFriction).setRotation(new (0, $ilwiq.Quaternion)().setFromAxisAngle(new (0, $ilwiq.Vector3)(0, 0, 1), Math.PI / 2)).setMass(wheelMass).setCollisionGroups(wheelId);\n        this.world.createCollider(wheelBRShape, wheelBRBody);\n        this.wheelBRMotor = this.world.createImpulseJoint((0, $2LLMu.JointData).revolute(new (0, $ilwiq.Vector3)(-frontOffset.x, frontOffset.y, -frontOffset.z), new (0, $ilwiq.Vector3)(0, 0, 0), new (0, $ilwiq.Vector3)(-1, 0, 0)), chasisBody, wheelBRBody, true);\n        // setup BL wheel\n        const wheelBLBodyDesc = new (0, $2LLMu.RigidBodyDesc)((0, $2LLMu.RigidBodyType).Dynamic).setCanSleep(true);\n        const wheelBLBody = this.world.createRigidBody(wheelBLBodyDesc);\n        const wheelBLShape = (0, $2LLMu.ColliderDesc).cylinder(0.2, 0.3).setTranslation(0, 0, 0).setFriction(wheelFriction).setRotation(new (0, $ilwiq.Quaternion)().setFromAxisAngle(new (0, $ilwiq.Vector3)(0, 0, 1), Math.PI / 2)).setMass(wheelMass).setCollisionGroups(wheelId);\n        this.world.createCollider(wheelBLShape, wheelBLBody);\n        this.wheelBLMotor = this.world.createImpulseJoint((0, $2LLMu.JointData).revolute(new (0, $ilwiq.Vector3)(frontOffset.x, frontOffset.y, -frontOffset.z), new (0, $ilwiq.Vector3)(0, 0, 0), new (0, $ilwiq.Vector3)(-1, 0, 0)), chasisBody, wheelBLBody, true);\n    }\n    update(delta) {\n        let targetVelocity = 0;\n        if ($eeb00b4f2e28b67e$var$keyMap[\"KeyW\"]) targetVelocity = -500;\n        if ($eeb00b4f2e28b67e$var$keyMap[\"KeyS\"]) targetVelocity = 200;\n        this.wheelBLMotor.configureMotorVelocity(targetVelocity, 2.0);\n        this.wheelBRMotor.configureMotorVelocity(targetVelocity, 2.0);\n    }\n}\n\n\n//# sourceMappingURL=test-car.285d9dab.js.map\n","var Stats = function () {\n\n\tvar mode = 0;\n\n\tvar container = document.createElement( 'div' );\n\tcontainer.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\n\tcontainer.addEventListener( 'click', function ( event ) {\n\n\t\tevent.preventDefault();\n\t\tshowPanel( ++ mode % container.children.length );\n\n\t}, false );\n\n\t//\n\n\tfunction addPanel( panel ) {\n\n\t\tcontainer.appendChild( panel.dom );\n\t\treturn panel;\n\n\t}\n\n\tfunction showPanel( id ) {\n\n\t\tfor ( var i = 0; i < container.children.length; i ++ ) {\n\n\t\t\tcontainer.children[ i ].style.display = i === id ? 'block' : 'none';\n\n\t\t}\n\n\t\tmode = id;\n\n\t}\n\n\t//\n\n\tvar beginTime = ( performance || Date ).now(), prevTime = beginTime, frames = 0;\n\n\tvar fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) );\n\tvar msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) );\n\n\tif ( self.performance && self.performance.memory ) {\n\n\t\tvar memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) );\n\n\t}\n\n\tshowPanel( 0 );\n\n\treturn {\n\n\t\tREVISION: 16,\n\n\t\tdom: container,\n\n\t\taddPanel: addPanel,\n\t\tshowPanel: showPanel,\n\n\t\tbegin: function () {\n\n\t\t\tbeginTime = ( performance || Date ).now();\n\n\t\t},\n\n\t\tend: function () {\n\n\t\t\tframes ++;\n\n\t\t\tvar time = ( performance || Date ).now();\n\n\t\t\tmsPanel.update( time - beginTime, 200 );\n\n\t\t\tif ( time >= prevTime + 1000 ) {\n\n\t\t\t\tfpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 );\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t\tif ( memPanel ) {\n\n\t\t\t\t\tvar memory = performance.memory;\n\t\t\t\t\tmemPanel.update( memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tbeginTime = this.end();\n\n\t\t},\n\n\t\t// Backwards Compatibility\n\n\t\tdomElement: container,\n\t\tsetMode: showPanel\n\n\t};\n\n};\n\nStats.Panel = function ( name, fg, bg ) {\n\n\tvar min = Infinity, max = 0, round = Math.round;\n\tvar PR = round( window.devicePixelRatio || 1 );\n\n\tvar WIDTH = 80 * PR, HEIGHT = 48 * PR,\n\t\tTEXT_X = 3 * PR, TEXT_Y = 2 * PR,\n\t\tGRAPH_X = 3 * PR, GRAPH_Y = 15 * PR,\n\t\tGRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n\n\tvar canvas = document.createElement( 'canvas' );\n\tcanvas.width = WIDTH;\n\tcanvas.height = HEIGHT;\n\tcanvas.style.cssText = 'width:80px;height:48px';\n\n\tvar context = canvas.getContext( '2d' );\n\tcontext.font = 'bold ' + ( 9 * PR ) + 'px Helvetica,Arial,sans-serif';\n\tcontext.textBaseline = 'top';\n\n\tcontext.fillStyle = bg;\n\tcontext.fillRect( 0, 0, WIDTH, HEIGHT );\n\n\tcontext.fillStyle = fg;\n\tcontext.fillText( name, TEXT_X, TEXT_Y );\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\tcontext.fillStyle = bg;\n\tcontext.globalAlpha = 0.9;\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\treturn {\n\n\t\tdom: canvas,\n\n\t\tupdate: function ( value, maxValue ) {\n\n\t\t\tmin = Math.min( min, value );\n\t\t\tmax = Math.max( max, value );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 1;\n\t\t\tcontext.fillRect( 0, 0, WIDTH, GRAPH_Y );\n\t\t\tcontext.fillStyle = fg;\n\t\t\tcontext.fillText( round( value ) + ' ' + name + ' (' + round( min ) + '-' + round( max ) + ')', TEXT_X, TEXT_Y );\n\n\t\t\tcontext.drawImage( canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 0.9;\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round( ( 1 - ( value / maxValue ) ) * GRAPH_HEIGHT ) );\n\n\t\t}\n\n\t};\n\n};\n\nexport default Stats;\n","import {\r\n    ColliderDesc,\r\n    ImpulseJoint,\r\n    init,\r\n    JointData,\r\n    PrismaticImpulseJoint,\r\n    RigidBodyDesc,\r\n    RigidBodyType,\r\n    World\r\n} from '@dimforge/rapier3d-compat';\r\nimport { Entity, RenderableEntity } from 'src/libs/entity';\r\nimport RapierDebugRenderer from 'src/utils/debug-renderer';\r\nimport { TBuildScene, TKeyMap } from 'src/utils/types';\r\nimport { generateCollisionId, initBasicScene } from 'src/utils/utils';\r\nimport {\r\n    AxesHelper,\r\n    BoxGeometry,\r\n    Clock,\r\n    Mesh,\r\n    MeshPhongMaterial,\r\n    Object3D,\r\n    Quaternion,\r\n    Scene,\r\n    Vector3\r\n} from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min';\r\n\r\nconst entities: Entity[] = [];\r\nlet options = { showAxis: true };\r\nconst config: TBuildScene = {\r\n    camera: 'pointerLock',\r\n    cameraPos: [0, 1, 4],\r\n    fov: 75,\r\n    lightType: 'directional'\r\n};\r\nconst collisionGroups = {\r\n    floorCID: 0,\r\n    carChasisCID: 1,\r\n    wheelCID: 2,\r\n    axelCID: 3\r\n};\r\nconst keyMap: TKeyMap = {};\r\n\r\n// -----------------------------------------------------------\r\n// -----------------------------------------------------------\r\n\r\ninit().then(async () => {\r\n    // initialize the scene\r\n    const { world, scene, camera, controls, renderer, pivot, stats } = initBasicScene(\r\n        keyMap,\r\n        config\r\n    );\r\n\r\n    // setup geometry and colliders\r\n    await buildScene(entities, scene, world, pivot);\r\n\r\n    // setup helpers\r\n    const rapierDebugRenderer = new RapierDebugRenderer(scene, world);\r\n    const axisHelper = new AxesHelper(3);\r\n    options.showAxis && scene.add(axisHelper);\r\n\r\n    // setup the loop\r\n    const clock = new Clock();\r\n    let delta;\r\n\r\n    // setup the controls\r\n    const gui = new GUI();\r\n    gui.add(rapierDebugRenderer, 'enabled').name('Rapier Degug Renderer');\r\n    gui.add(options, 'showAxis')\r\n        .name('Show Axis')\r\n        .onChange((status: boolean) => {\r\n            status ? scene.add(axisHelper) : scene.remove(axisHelper);\r\n        });\r\n\r\n    function gameLoop() {\r\n        delta = clock.getDelta();\r\n        world.timestep = Math.min(delta, 0.1);\r\n        world.step();\r\n\r\n        for (const entity of entities) {\r\n            entity.update(world.timestep);\r\n        }\r\n\r\n        controls instanceof OrbitControls && controls.update();\r\n        rapierDebugRenderer.update();\r\n        renderer.render(scene, camera);\r\n        stats.update();\r\n        window.requestAnimationFrame(gameLoop);\r\n    }\r\n\r\n    window.requestAnimationFrame(gameLoop);\r\n});\r\n\r\n// -----------------------------------------------------------\r\n// -----------------------------------------------------------\r\n\r\nasync function buildScene(\r\n    entities: Entity[],\r\n    scene: THREE.Scene,\r\n    world: World,\r\n    pivot: Object3D | null\r\n) {\r\n    // setup the floor\r\n    const floorMesh = new Mesh(new BoxGeometry(100, 1, 100), new MeshPhongMaterial());\r\n    floorMesh.receiveShadow = true;\r\n    floorMesh.position.y = -1;\r\n    const floorBody = world.createRigidBody(RigidBodyDesc.fixed().setTranslation(0, -1, 0));\r\n    const floorShape = ColliderDesc.cuboid(50, 0.5, 50);\r\n    world.createCollider(floorShape, floorBody);\r\n    const floor = new RenderableEntity(scene, world, floorMesh, 'floor', floorBody);\r\n    floor.addToScene();\r\n    entities.push(floor);\r\n\r\n    const car = new TempCar(\r\n        scene,\r\n        world\r\n        // pivot,\r\n        // 0.3,\r\n        // 0.175,\r\n        // keyMap\r\n    );\r\n    // (0.9, 0.6, 2)\r\n    await car.init([0, 1, 0], new Vector3(0.5, -0.5, 1.5), new Vector3(0, 0, 0));\r\n\r\n    entities.push(car);\r\n}\r\n\r\n// -----------------------------------------------------------\r\n// -----------------------------------------------------------\r\nclass TempCar extends Entity {\r\n    world: World;\r\n    wheelBLMotor: ImpulseJoint;\r\n    wheelBRMotor: ImpulseJoint;\r\n\r\n    constructor(scene: Scene, world: World) {\r\n        super(scene, 'tempCar');\r\n\r\n        this.world = world;\r\n    }\r\n\r\n    async init(position: [number, number, number], frontOffset: Vector3, backOffset: Vector3) {\r\n        const chasisId = generateCollisionId(\r\n            [collisionGroups.carChasisCID],\r\n            [collisionGroups.floorCID]\r\n        );\r\n        const wheelId = generateCollisionId([collisionGroups.wheelCID], [collisionGroups.floorCID]);\r\n        const chasisMass = 1500;\r\n        const wheelMass = 7;\r\n        const chasisFriction = 0.6;\r\n        const wheelFriction = 0.6;\r\n\r\n        // setup chasis\r\n        const chasisBodyDesc = new RigidBodyDesc(RigidBodyType.Dynamic)\r\n            .setTranslation(...position)\r\n            .setCanSleep(true);\r\n        const chasisBody = this.world.createRigidBody(chasisBodyDesc);\r\n        const chasisShape = ColliderDesc.cuboid(0.9, 0.6, 2)\r\n            .setTranslation(0, 0, 0)\r\n            .setMass(chasisMass)\r\n            .setRestitution(0.1)\r\n            .setFriction(chasisFriction)\r\n            .setCollisionGroups(chasisId);\r\n        this.world.createCollider(chasisShape, chasisBody);\r\n\r\n        // -----------------------------------------------------------------\r\n        // -----------------------------------------------------------------\r\n\r\n        // setup FR wheel\r\n        const wheelFRBodyDesc = new RigidBodyDesc(RigidBodyType.Dynamic).setCanSleep(true);\r\n        const wheelFRBody = this.world.createRigidBody(wheelFRBodyDesc);\r\n        const wheelFRShape = ColliderDesc.cylinder(0.2, 0.3)\r\n            .setTranslation(0, 0, 0)\r\n            .setRotation(new Quaternion().setFromAxisAngle(new Vector3(0, 0, 1), Math.PI / 2))\r\n            .setMass(wheelMass)\r\n            .setFriction(wheelFriction)\r\n            .setRestitution(0.1)\r\n            .setCollisionGroups(wheelId);\r\n        this.world.createCollider(wheelFRShape, wheelFRBody);\r\n        const wheelFRMotor = this.world.createImpulseJoint(\r\n            JointData.revolute(\r\n                new Vector3(-frontOffset.x, frontOffset.y, frontOffset.z),\r\n                new Vector3(0, 0, 0),\r\n                new Vector3(-1, 0, 0)\r\n            ),\r\n            chasisBody,\r\n            wheelFRBody,\r\n            true\r\n        );\r\n\r\n        // setup FL wheel\r\n        const wheelFLBodyDesc = new RigidBodyDesc(RigidBodyType.Dynamic).setCanSleep(true);\r\n        const wheelFLBody = this.world.createRigidBody(wheelFLBodyDesc);\r\n        const wheelFLShape = ColliderDesc.cylinder(0.2, 0.3)\r\n            .setTranslation(0, 0, 0)\r\n            .setRotation(new Quaternion().setFromAxisAngle(new Vector3(0, 0, 1), Math.PI / 2))\r\n            .setMass(wheelMass)\r\n            .setFriction(wheelFriction)\r\n            .setRestitution(0.1)\r\n            .setCollisionGroups(wheelId);\r\n        this.world.createCollider(wheelFLShape, wheelFLBody);\r\n        const wheelFLMotor = this.world.createImpulseJoint(\r\n            JointData.revolute(\r\n                new Vector3(frontOffset.x, frontOffset.y, frontOffset.z),\r\n                new Vector3(0, 0, 0),\r\n                new Vector3(-1, 0, 0)\r\n            ),\r\n            chasisBody,\r\n            wheelFLBody,\r\n            true\r\n        );\r\n\r\n        // setup BR wheel\r\n        const wheelBRBodyDesc = new RigidBodyDesc(RigidBodyType.Dynamic).setCanSleep(true);\r\n        const wheelBRBody = this.world.createRigidBody(wheelBRBodyDesc);\r\n        const wheelBRShape = ColliderDesc.cylinder(0.2, 0.3)\r\n            .setTranslation(0, 0, 0)\r\n            .setFriction(wheelFriction)\r\n            .setRotation(new Quaternion().setFromAxisAngle(new Vector3(0, 0, 1), Math.PI / 2))\r\n            .setMass(wheelMass)\r\n            .setCollisionGroups(wheelId);\r\n        this.world.createCollider(wheelBRShape, wheelBRBody);\r\n        this.wheelBRMotor = this.world.createImpulseJoint(\r\n            JointData.revolute(\r\n                new Vector3(-frontOffset.x, frontOffset.y, -frontOffset.z),\r\n                new Vector3(0, 0, 0),\r\n                new Vector3(-1, 0, 0)\r\n            ),\r\n            chasisBody,\r\n            wheelBRBody,\r\n            true\r\n        );\r\n\r\n        // setup BL wheel\r\n        const wheelBLBodyDesc = new RigidBodyDesc(RigidBodyType.Dynamic).setCanSleep(true);\r\n        const wheelBLBody = this.world.createRigidBody(wheelBLBodyDesc);\r\n        const wheelBLShape = ColliderDesc.cylinder(0.2, 0.3)\r\n            .setTranslation(0, 0, 0)\r\n            .setFriction(wheelFriction)\r\n            .setRotation(new Quaternion().setFromAxisAngle(new Vector3(0, 0, 1), Math.PI / 2))\r\n            .setMass(wheelMass)\r\n            .setCollisionGroups(wheelId);\r\n        this.world.createCollider(wheelBLShape, wheelBLBody);\r\n        this.wheelBLMotor = this.world.createImpulseJoint(\r\n            JointData.revolute(\r\n                new Vector3(frontOffset.x, frontOffset.y, -frontOffset.z),\r\n                new Vector3(0, 0, 0),\r\n                new Vector3(-1, 0, 0)\r\n            ),\r\n            chasisBody,\r\n            wheelBLBody,\r\n            true\r\n        );\r\n    }\r\n\r\n    update(delta: number): void {\r\n        let targetVelocity = 0;\r\n        if (keyMap['KeyW']) {\r\n            targetVelocity = -500;\r\n        }\r\n        if (keyMap['KeyS']) {\r\n            targetVelocity = 200;\r\n        }\r\n        (this.wheelBLMotor as PrismaticImpulseJoint).configureMotorVelocity(targetVelocity, 2.0);\r\n        (this.wheelBRMotor as PrismaticImpulseJoint).configureMotorVelocity(targetVelocity, 2.0);\r\n    }\r\n}\r\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$5aae44c9b1864d53$export$2e2bcd8739ae039","set","s","enumerable","configurable","$5aae44c9b1864d53$var$Stats","mode","container","document","createElement","addPanel","panel","appendChild","dom","showPanel","i","children","length","style","display","cssText","addEventListener","event","preventDefault","beginTime","performance","Date","now","prevTime","frames","fpsPanel","Panel","msPanel","self","memory","memPanel","REVISION","begin","end","time","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","name","fg","bg","min","Infinity","max","round","Math","PR","window","devicePixelRatio","WIDTH","HEIGHT","TEXT_X","TEXT_Y","GRAPH_X","GRAPH_Y","GRAPH_WIDTH","GRAPH_HEIGHT","canvas","width","height","context","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","value","maxValue","drawImage","$2LLMu","$ccy7r","$e7TkJ","$fK5g3","$ilwiq","$5Rd1x","$jiuw3","$eeb00b4f2e28b67e$var$entities","$eeb00b4f2e28b67e$var$options","showAxis","$eeb00b4f2e28b67e$var$config","camera","cameraPos","fov","lightType","$eeb00b4f2e28b67e$var$collisionGroups","floorCID","carChasisCID","wheelCID","$eeb00b4f2e28b67e$var$keyMap","$eeb00b4f2e28b67e$var$buildScene","entities","scene","world","pivot","floorMesh","Mesh","BoxGeometry","MeshPhongMaterial","receiveShadow","position","y","floorBody","createRigidBody","RigidBodyDesc","fixed","setTranslation","floorShape","ColliderDesc","cuboid","createCollider","floor","RenderableEntity","addToScene","push","car","$eeb00b4f2e28b67e$var$TempCar","Vector3","then","delta","controls","renderer","stats","initBasicScene","rapierDebugRenderer","default","axisHelper","AxesHelper","add","clock","Clock","gui","GUI","onChange","status","remove","requestAnimationFrame","gameLoop","entity","getDelta","timestep","step","OrbitControls","render","Entity","constructor","frontOffset","backOffset","chasisId","generateCollisionId","wheelId","chasisBodyDesc","RigidBodyType","Dynamic","setCanSleep","chasisBody","chasisShape","setMass","setRestitution","setFriction","setCollisionGroups","wheelFRBodyDesc","wheelFRBody","wheelFRShape","cylinder","setRotation","Quaternion","setFromAxisAngle","PI","createImpulseJoint","JointData","revolute","x","z","wheelFLBodyDesc","wheelFLBody","wheelFLShape","wheelBRBodyDesc","wheelBRBody","wheelBRShape","wheelBRMotor","wheelBLBodyDesc","wheelBLBody","wheelBLShape","wheelBLMotor","targetVelocity","configureMotorVelocity"],"version":3,"file":"test-car.285d9dab.js.map"}